{"version":3,"sources":["types/FIlterBy.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers.ts","index.tsx"],"names":["FilterBy","TodoList","todos","onSelectTodo","selectedTodo","className","map","todo","completed","id","title","classNames","type","onClick","TodoFilter","query","onSetQuery","onChangeFilterBy","handleSelect","useCallback","event","target","value","All","Active","Completed","onChange","Object","values","current","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","onHide","useState","user","setUser","isError","setIsError","isLoading","setIsLoading","getUserFromServer","a","userFromServer","useEffect","displayModal","href","email","name","App","setTodos","shownTodoId","setshownTodoId","setQuery","filterBy","setFilterBy","getTodosFromServer","todosFromServer","changeShownTodo","activeTodo","useMemo","find","visibleTodos","filter","filtered","toLowerCase","includes","getVisibleTodos","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,0FCUCC,EAA4B,SAAC,GAAD,IAErCC,EAFqC,EAErCA,MACAC,EAHqC,EAGrCA,aACAC,EAJqC,EAIrCA,aAJqC,OAOvC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GACT,IAAQC,EAAyBD,EAAzBC,UAAWC,EAAcF,EAAdE,GAAIC,EAAUH,EAAVG,MAEvB,OACE,qBACE,UAAQ,OACRL,UAAU,GAFZ,UAKE,oBAAIA,UAAU,eAAd,SAA8BI,IAC9B,oBAAIJ,UAAU,eAAd,SAEGG,GACC,sBAAMH,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWM,IAAW,CACpB,mBAAoBH,EACpB,mBAAoBA,IAHxB,SAMGE,MAGL,oBAAIL,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QAAS,kBAAMV,EAAaM,IAJ9B,SAME,sBAAMJ,UAAU,OAAhB,SACE,mBAAGA,UAAWM,IACZ,MACA,CAAE,eAAgBP,IAAiBK,GACnC,CAAE,SAAUL,IAAiBK,cAjChCA,a,SDvCLT,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KESL,IAAMc,EAA8B,SAAC,GAMtC,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,iBAGIC,EAAeC,uBACnB,SAACC,GACC,OAAQA,EAAMC,OAAOC,OACnB,KAAKtB,EAASuB,IACZN,EAAiBjB,EAASuB,KAC1B,MAEF,KAAKvB,EAASwB,OACZP,EAAiBjB,EAASwB,QAC1B,MAEF,KAAKxB,EAASyB,UACZR,EAAiBjB,EAASyB,cAM7B,IAGL,OACE,uBAAMpB,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,kBAAhB,SACE,wBACE,UAAQ,eACRqB,SAAUR,EAFZ,SAIGS,OAAOC,OAAO5B,GAAUM,KAAI,SAAAuB,GAAO,OAClC,wBAAQP,MAAOO,EAAf,mBACMA,EAAQ,GAAGC,cAAgBD,EAAQE,MAAM,eAOvD,oBAAG1B,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLP,UAAU,QACV2B,YAAY,YACZV,MAAOP,EACPW,SAAU,SAACN,GAAD,OAAWJ,EAAWI,EAAMC,OAAOC,UAE/C,sBAAMjB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdU,GACC,sBAAMV,UAAU,gBAAgB4B,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRtB,KAAK,SACLP,UAAU,SACVQ,QAAS,kBAAMG,EAAW,gBCvE3BmB,G,MAAmB,kBAC9B,qBAAK9B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSnB,SAAS+B,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAEMC,EAAU,SAACC,GAAD,OAAoBZ,EAAG,iBAAiBY,KCdlDC,EAA6B,SAAC,GAAsB,IAApB1C,EAAmB,EAAnBA,KAAM2C,EAAa,EAAbA,OAE/CzC,EAIEF,EAJFE,GACAuC,EAGEzC,EAHFyC,OACAtC,EAEEH,EAFFG,MACAF,EACED,EADFC,UAGF,EAAwB2C,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EAAiB,uCAAG,4BAAAC,EAAA,+EAEOZ,EAAQC,GAFf,OAEhBY,EAFgB,OAItBP,EAAQO,GAJc,gDAMtBL,GAAW,GANW,yBAQtBE,GAAa,GARS,4EAAH,qDAYvBI,qBAAU,WACRH,MACC,IAEH,IAAMI,GAAgBN,IAAcF,GAAWF,EAE/C,OACE,sBAAK/C,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdmD,GACE,cAAC,EAAD,IACDM,EACA,sBAAKzD,UAAWM,IACd,aACA,eACA,CACE,aAAcH,EACd,aAAcA,IALlB,UASE,yBAAQH,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYI,KAEZ,wBACE,aAAW,qBACXG,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAASqC,OAIb,sBAAK7C,UAAU,kBAAf,UACE,mBAAGA,UAAU,sBAAsB,UAAQ,cAA3C,SACGK,IAGH,oBAAGL,UAAU,sBAAsB,UAAQ,aAA3C,UACE,wBAAQA,UAAWM,IAAW,CAC5B,mBAAoBH,EACpB,mBAAoBA,IAFtB,SAKGA,EAAY,OAAS,YAGvB,OAED,mBAAGuD,KAAI,iBAAYX,EAAKY,OAAxB,SACGZ,EAAKa,gBAOd,sBAAK5D,UAAU,oCAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBAAKA,UAAU,mBAAf,mBAGA,wBACE,aAAW,qBACXO,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAASqC,OAIb,yBAAS7C,UAAU,kBAAnB,SACE,mBAAGA,UAAU,6CAAb,gDC9FC6D,EAAgB,WAC3B,MAA0Bf,mBAAiB,IAA3C,mBAAOjD,EAAP,KAAciE,EAAd,KACA,EAAkChB,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsCJ,mBAAS,GAA/C,mBAAOiB,EAAP,KAAoBC,EAApB,KACA,EAA0BlB,mBAAS,IAAnC,mBAAOpC,EAAP,KAAcuD,EAAd,KACA,EAAgCnB,mBAASnD,EAASuB,KAAlD,mBAAOgD,EAAP,KAAiBC,EAAjB,KAEMC,EAAkB,uCAAG,4BAAAd,EAAA,+EFHCvB,EAAY,UEGb,OAEjBsC,EAFiB,OAIvBP,EAASO,GAJc,gDAMvBnB,GAAW,GANY,yBAQvBE,GAAa,GARU,4EAAH,qDAYxBI,qBAAU,WACRY,MACC,IAEH,IAAME,EAAkBxD,uBAAY,SAACV,GACnC4D,EAAe5D,KACd,IAEGmE,EAAaC,mBAAQ,kBACzB3E,EAAM4E,MAAK,qBAAGrE,KAAgB2D,OAC7B,CAACA,IAEEW,EChDuB,SAC7B7E,EACAoB,EACA0D,GAEA,IAAIC,EAAW/E,EAEf,OAAQ8E,GACN,KAAKhF,EAASwB,OACZyD,EAAW/E,EAAM8E,QAAO,SAAAzE,GAAI,OAAKA,EAAKC,aACtC,MAEF,KAAKR,EAASyB,UACZwD,EAAW/E,EAAM8E,QAAO,SAAAzE,GAAI,OAAIA,EAAKC,aAOzC,OAAOyE,EAASD,QAAO,SAAAzE,GAAI,OACzBA,EAAKG,MAAMwE,cAAcC,SAAS7D,EAAM4D,kBD2BrBE,CAAgBlF,EAAOa,EAAOwD,GAEnD,OACE,qCACE,qBAAKlE,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEU,MAAOA,EACPC,WAAYsD,EACZrD,iBAAkBuD,MAItB,sBAAKnE,UAAU,QAAf,UACGmD,IAAcF,GACT,cAAC,EAAD,IACN,cAAC,EAAD,CACEpD,MAAO6E,EACP5E,aAAcwE,EACdvE,aAAcgE,cAOvBQ,GAEG,cAAC,EAAD,CACErE,KAAMqE,EACN1B,OAAQ,kBAAMyB,EAAgB,UElF1CU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.76a0b2de.chunk.js","sourcesContent":["export enum FilterBy {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos : Todo[],\n  onSelectTodo: (id: number) => void,\n  selectedTodo: number,\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    onSelectTodo,\n    selectedTodo,\n  },\n) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const { completed, id, title } = todo;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelectTodo(id)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'far',\n                    { 'fa-eye-slash': selectedTodo === id },\n                    { 'fa-eye': selectedTodo !== id },\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { useCallback } from 'react';\nimport { FilterBy } from '../../types/FIlterBy';\n\ntype Props = {\n  query: string,\n  onSetQuery: (input: string) => void\n  onChangeFilterBy: (value: FilterBy) => void\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    query,\n    onSetQuery,\n    onChangeFilterBy,\n  },\n) => {\n  const handleSelect = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      switch (event.target.value) {\n        case FilterBy.All:\n          onChangeFilterBy(FilterBy.All);\n          break;\n\n        case FilterBy.Active:\n          onChangeFilterBy(FilterBy.Active);\n          break;\n\n        case FilterBy.Completed:\n          onChangeFilterBy(FilterBy.Completed);\n          break;\n\n        default:\n          break;\n      }\n    }, [],\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select is-black\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n          >\n            {Object.values(FilterBy).map(current => (\n              <option value={current}>\n                {`${current[0].toUpperCase() + current.slice(1)}`}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onSetQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onSetQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo,\n  onHide: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onHide }) => {\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = todo;\n\n  const [user, setUser] = useState<User>();\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getUserFromServer = async () => {\n    try {\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  const displayModal = !isLoading && !isError && user;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n      && <Loader />}\n      { displayModal ? (\n        <div className={classNames(\n          'modal-card',\n          'notification',\n          {\n            'is-success': completed,\n            'is-danger': !completed,\n          },\n        )}\n        >\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n            <button\n              aria-label=\"close-modal-button\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onHide}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block has-text-dark\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block has-text-dark\" data-cy=\"modal-user\">\n              <strong className={classNames({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n\n          </div>\n        </div>\n      ) : (\n        <div className=\"modal-card notification is-danger\">\n          <header className=\"modal-card-head\">\n            <div className=\"modal-card-title\">\n              Error\n            </div>\n            <button\n              aria-label=\"close-modal-button\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onHide}\n            />\n          </header>\n\n          <article className=\"modal-card-body\">\n            <p className=\"block has-text-dark has-text-weight-medium\">\n              The error has happened...\n            </p>\n          </article>\n        </div>\n\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useEffect,\n  useState,\n  useCallback,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterBy } from './types/FIlterBy';\nimport { getVisibleTodos } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [shownTodoId, setshownTodoId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState(FilterBy.All);\n\n  const getTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const changeShownTodo = useCallback((id: number) => {\n    setshownTodoId(id);\n  }, []);\n\n  const activeTodo = useMemo(() => (\n    todos.find(({ id }) => id === shownTodoId)\n  ), [shownTodoId]);\n\n  const visibleTodos = getVisibleTodos(todos, query, filterBy);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onSetQuery={setQuery}\n                onChangeFilterBy={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && !isError\n                && (<Loader />)}\n              <TodoList\n                todos={visibleTodos}\n                onSelectTodo={changeShownTodo}\n                selectedTodo={shownTodoId}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {activeTodo\n        && (\n          <TodoModal\n            todo={activeTodo}\n            onHide={() => changeShownTodo(0)}\n          />\n        )}\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { FilterBy } from './types/FIlterBy';\n\nexport const getVisibleTodos = (\n  todos:Todo[],\n  value: string,\n  filter: FilterBy,\n) => {\n  let filtered = todos;\n\n  switch (filter) {\n    case FilterBy.Active:\n      filtered = todos.filter(todo => !todo.completed);\n      break;\n\n    case FilterBy.Completed:\n      filtered = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return filtered.filter(todo => (\n    todo.title.toLowerCase().includes(value.toLowerCase())\n  ));\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}